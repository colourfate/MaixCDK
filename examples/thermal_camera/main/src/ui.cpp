// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.2
// LVGL version: 8.3.6
// Project name: SquareLine_Project

#include "ui.h"
#include "image_fusion.h"
#include "platform.h"
#include "common.h"
#include <cstdint>
#include <lvgl/src/core/lv_obj_style.h>
#include <lvgl/src/widgets/bar/lv_bar.h>
#include <pthread.h>
#include <stdio.h>
#include <stdint.h>
#include <unistd.h>

using namespace std;

typedef struct {
    lv_obj_t *high_temp;
    lv_obj_t *center_temp;
    lv_obj_t *low_temp;
    lv_obj_t *batter_level;
} lvgl_ui_context;

static lvgl_ui_context g_ui_ctx;
static lv_timer_t *g_text_timer;
static lv_obj_t *g_status_bar;
static lv_obj_t *g_menu_cont;
static lv_indev_t *g_indev_encoder;

// TODO: 这里应该可以带一个值进来
static void encoder_read(lv_indev_t *indev, lv_indev_data_t *data)
{
    lv_obj_t *cont_col = (lv_obj_t *)lv_indev_get_user_data(indev);
    data->enc_diff = platform_wheel_get_diff();

    if (platform_button_get_act(BUTTON_TYPE_PWR)) {
        data->state = LV_INDEV_STATE_PRESSED;
    } else {
        data->state = LV_INDEV_STATE_RELEASED;
    }

    if (platform_button_get_act(BUTTON_TYPE_USER)) {
        if (lv_obj_has_flag(cont_col, LV_OBJ_FLAG_HIDDEN)) {
            lv_obj_clear_flag(cont_col, LV_OBJ_FLAG_HIDDEN); // 显示菜单
        } else {
            lv_obj_add_flag(cont_col, LV_OBJ_FLAG_HIDDEN); // 隐藏菜单
        }
    }
}

static void mode_event_handle(lv_event_t *e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t *obj = (lv_obj_t *)lv_event_get_target(e);
    if(code == LV_EVENT_VALUE_CHANGED) {
        uint32_t index = lv_dropdown_get_selected(obj);
        pinfo("Mode select Option: %d\n", index);

        switch (index) {
        case 0:
            image_fusion_set_mode(FUSION_MODE_JOINT);
            break;
        case 1:
            image_fusion_set_mode(FUSION_MODE_MIX);
            break;
        case 2:
            image_fusion_set_mode(FUSION_MODE_CAMERA);
            break;
        case 3:
            image_fusion_set_mode(FUSION_MODE_THERMAL);
            break;
        default:
            perr("Not support mode: %d\n", index);
        }
    }
}

static void color_event_handle(lv_event_t *e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t *obj = (lv_obj_t *)lv_event_get_target(e);
    if(code == LV_EVENT_VALUE_CHANGED) {
        uint32_t index = lv_dropdown_get_selected(obj);
        printf("Color select Option: %d\n", index);

        switch (index) {
        case 0:
            image_fusion_set_colormap(FUSION_COLORMAP_PLASMA);
            break;
        case 1:
            image_fusion_set_colormap(FUSION_COLORMAP_JET);
            break;
        default:
            printf("Not support mode: %d\n", index);
        }
    }
}

static void trace_event_handler(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t *obj = (lv_obj_t *)lv_event_get_target(e);
    if(code == LV_EVENT_VALUE_CHANGED) {
        if (lv_obj_has_state(obj, LV_STATE_CHECKED)) {
            platform_display_draw_rect(true);
        } else {
            platform_display_draw_rect(false);
        }
    }
}

static void menu_init(void)
{
    lv_indev_t *indev_encoder = lv_indev_create();
    lv_indev_set_type(indev_encoder, LV_INDEV_TYPE_ENCODER);
    lv_indev_set_read_cb(indev_encoder, encoder_read);

    lv_group_t *group;
    group = lv_group_create();
    lv_indev_set_group(indev_encoder, group);

    lv_obj_t *cont_col = lv_obj_create(lv_screen_active());
    lv_obj_set_size(cont_col, 300, 300);
    lv_obj_align(cont_col, LV_ALIGN_TOP_MID, 0, 5);
    lv_obj_set_flex_flow(cont_col, LV_FLEX_FLOW_COLUMN);

    lv_obj_t *title = lv_label_create(cont_col);
    lv_label_set_text(title, "Setting");

    lv_obj_t *mode_label = lv_label_create(cont_col);
    lv_label_set_text(mode_label, "Mode");
    lv_obj_t *mode_dropdown = lv_dropdown_create(cont_col);
    lv_dropdown_set_options_static(mode_dropdown, "Joint\nMix\nCamera\nThermal");
    lv_obj_add_event_cb(mode_dropdown, mode_event_handle, LV_EVENT_ALL, NULL);
    lv_group_add_obj(group, mode_dropdown);

    lv_obj_t *color_label = lv_label_create(cont_col);
    lv_label_set_text(color_label, "Color");
    lv_obj_t *color_dropdown = lv_dropdown_create(cont_col);
    lv_dropdown_set_options_static(color_dropdown, "PLASMA\nJET");
    lv_obj_add_event_cb(color_dropdown, color_event_handle, LV_EVENT_ALL, NULL);
    lv_group_add_obj(group, color_dropdown);

    lv_obj_t *trace_label = lv_label_create(cont_col);
    lv_label_set_text(trace_label, "Trace");
    lv_obj_t *trace_sw = lv_switch_create(cont_col);
    lv_obj_add_state(trace_sw, LV_STATE_CHECKED);
    lv_obj_add_event_cb(trace_sw, trace_event_handler, LV_EVENT_ALL, NULL);
    lv_group_add_obj(group, trace_sw);

    lv_obj_t *text_label = lv_label_create(cont_col);
    lv_label_set_text(text_label, "Text");
    lv_obj_t *text_sw = lv_switch_create(cont_col);
    lv_group_add_obj(group, text_sw);

    lv_obj_add_flag(cont_col, LV_OBJ_FLAG_HIDDEN);
    lv_indev_set_user_data(indev_encoder, cont_col);

    g_menu_cont = cont_col;
    g_indev_encoder = indev_encoder;
}

static void status_bar_init(void)
{
    lv_obj_t *status_bar = lv_obj_create(lv_screen_active());
    lv_obj_set_size(status_bar, 72, LV_VER_RES);
    lv_obj_align(status_bar, LV_ALIGN_LEFT_MID, 0, 0);
    lv_obj_set_style_bg_color(status_bar, lv_color_hex(0x0), LV_PART_MAIN);
    lv_obj_set_flex_flow(status_bar, LV_FLEX_FLOW_COLUMN);
    lv_obj_set_style_pad_left(status_bar, 10, LV_PART_MAIN);

    lv_obj_t *title = lv_label_create(status_bar);
    lv_label_set_text(title, "Status");

    lv_obj_t *high_title = lv_label_create(status_bar);
    lv_label_set_text(high_title, "High");
    lv_obj_set_style_text_color(high_title, lv_palette_main(LV_PALETTE_GREY), LV_PART_MAIN);
    lv_obj_t *high_temp = lv_label_create(status_bar);
    lv_label_set_text(high_temp, "20.5");
    lv_obj_set_style_text_color(high_temp, lv_palette_main(LV_PALETTE_RED), LV_PART_MAIN);

    lv_obj_t *center_title = lv_label_create(status_bar);
    lv_label_set_text(center_title, "Center");
    lv_obj_set_style_text_color(center_title, lv_palette_main(LV_PALETTE_GREY), LV_PART_MAIN);
    lv_obj_t *center_temp = lv_label_create(status_bar);
    lv_label_set_text(center_temp, "12.5");
    lv_obj_set_style_text_color(center_temp, lv_palette_main(LV_PALETTE_ORANGE), LV_PART_MAIN);

    lv_obj_t *low_title = lv_label_create(status_bar);
    lv_label_set_text(low_title, "Low");
    lv_obj_set_style_text_color(low_title, lv_palette_main(LV_PALETTE_GREY), LV_PART_MAIN);
    lv_obj_t *low_temp = lv_label_create(status_bar);
    lv_label_set_text(low_temp, "7.5");
    lv_obj_set_style_text_color(low_temp, lv_palette_main(LV_PALETTE_BLUE), LV_PART_MAIN);

    lv_style_t style_indic;
    lv_style_init(&style_indic);
    lv_style_set_bg_opa(&style_indic, LV_OPA_COVER);
    lv_style_set_bg_color(&style_indic, lv_palette_main(LV_PALETTE_RED));
    lv_style_set_bg_grad_color(&style_indic, lv_palette_main(LV_PALETTE_BLUE));
    lv_style_set_bg_grad_dir(&style_indic, LV_GRAD_DIR_VER);

    lv_obj_t *bar = lv_bar_create(status_bar);
    lv_obj_add_style(bar, &style_indic, LV_PART_INDICATOR);
    lv_obj_set_size(bar, 20, 80);
    lv_obj_center(bar);
    lv_obj_set_style_margin_hor(bar, 10, LV_PART_MAIN);
    lv_bar_set_range(bar, 0, 100);

    g_ui_ctx.high_temp = high_temp;
    g_ui_ctx.center_temp = center_temp;
    g_ui_ctx.low_temp = low_temp;
    g_ui_ctx.batter_level = bar;
    g_status_bar = status_bar;
}

static void ui_update(lv_timer_t *tmr)
{
    lv_obj_t *high_text = g_ui_ctx.high_temp;
    lv_obj_t *center_text = g_ui_ctx.center_temp;
    lv_obj_t *low_text = g_ui_ctx.low_temp;

    float max_temp, min_temp, center_temp;
    platform_display_get_temp(&max_temp, &min_temp, &center_temp);
    uint32_t bar_val = platform_batter_get_level();

    lv_label_set_text_fmt(high_text, "%.1f", max_temp);
    lv_label_set_text_fmt(center_text, "%.1f", center_temp);
    lv_label_set_text_fmt(low_text, "%.1f", min_temp);
    lv_bar_set_value(g_ui_ctx.batter_level, bar_val,  LV_ANIM_OFF);
}

void ui_init( void )
{
    lv_obj_set_style_bg_opa(lv_screen_active(), LV_OPA_TRANSP, LV_PART_MAIN);
    lv_obj_set_style_bg_opa(lv_layer_bottom(), LV_OPA_TRANSP, LV_PART_MAIN);
    lv_obj_set_style_opa(lv_screen_active(), LV_OPA_0, LV_PART_MAIN);
    lv_display_set_color_format(NULL, LV_COLOR_FORMAT_ARGB8888);
    lv_screen_load(lv_layer_top());
    lv_obj_remove_flag(lv_screen_active(), LV_OBJ_FLAG_SCROLLABLE);

    status_bar_init();
    menu_init();

    g_text_timer = lv_timer_create(ui_update, 500, NULL);
}

void ui_uninit(void)
{
    lv_timer_delete(g_text_timer);

    lv_obj_del(g_status_bar);
    lv_obj_del(g_menu_cont);

    lv_group_delete(lv_indev_get_group(g_indev_encoder));
    lv_indev_delete(g_indev_encoder);
}
